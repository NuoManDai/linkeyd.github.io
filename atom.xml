<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2017-05-26T09:11:52.939Z</updated>
  <id>/</id>
  
  <author>
    <name>蘭凛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fetch Cors跨域开发前端登陆实例</title>
    <link href="/2017/05/26/fetch-cors-client/"/>
    <id>/2017/05/26/fetch-cors-client/</id>
    <published>2017-05-26T09:07:17.000Z</published>
    <updated>2017-05-26T09:11:52.939Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h3><p>Fetch API 是新一代的AJAX“Asynchronous JavaScript and XML”技术实现方案，它替代了长期以来一直被默认XMLHttpRequest作为了当前Web应用与服务端进行通信的基础的方案。Fetch API的优势在于可以明确的配置请求对象，以及利用Promise方法进行返回。</p>
<p>npm安装依赖包:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install isomorphic-fetch --save</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="Cors跨域"><a href="#Cors跨域" class="headerlink" title="Cors跨域"></a>Cors跨域</h3><p>Cors是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出请求，从而克服了AJAX只能同源使用的限制。</p>
<p>Cors与JSONP区别在于，JSONP只支持GET请求，CORS支持所有类型的HTTP请求，而且IE浏览器不能低于IE10。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p>
<p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。<br>只要同时满足以下两大条件，就属于简单请求。<br>（1) 请求方法是以下三种方法之一：</p>
<blockquote>
<p>HEAD<br>GET<br>POST</p>
</blockquote>
<p>（2）HTTP的头信息不超出以下几种字段：</p>
<blockquote>
<p>Accept<br>Accept-Language<br>Content-Language<br>Last-Event-ID<br>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</p>
</blockquote>
<p>下面我们将使用ES6 async/await来替代promise方法来进行异步变成实现用例。</p>
<h3 id="Fetch-Cors简单请求包装"><a href="#Fetch-Cors简单请求包装" class="headerlink" title="Fetch Cors简单请求包装"></a>Fetch Cors简单请求包装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'isomorphic-fetch'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> postFetch = <span class="keyword">async</span> (url, body) =&gt; &#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url, &#123;</div><div class="line">      method: <span class="string">'POST'</span>,</div><div class="line">      mode: <span class="string">'cors'</span>,</div><div class="line">      headers: &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">      &#125;,</div><div class="line">      body:format(body)</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">let</span> json = <span class="keyword">await</span> response.json();</div><div class="line">    <span class="keyword">return</span> json;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(err)</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在简单请求中针对<code>&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;</code>我们需要对<code>body</code>进行一段参数结构的处理。让服务端可以对<code>req.body</code>进行取值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> format = (body) =&gt; &#123;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">  <span class="keyword">let</span> name;</div><div class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> body) &#123;</div><div class="line">    str += name +<span class="string">'='</span>+ body[name]+<span class="string">'&amp;'</span>;</div><div class="line">  &#125;</div><div class="line">  str = str.substr(<span class="number">0</span>,str.length<span class="number">-1</span>);</div><div class="line">  <span class="keyword">return</span> str;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Fetch-Cors非简单请求包装"><a href="#Fetch-Cors非简单请求包装" class="headerlink" title="Fetch Cors非简单请求包装"></a>Fetch Cors非简单请求包装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'isomorphic-fetch'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> postFetch = <span class="keyword">async</span> (url, body) =&gt; &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url, &#123;</div><div class="line">            method: <span class="string">'POST'</span>,</div><div class="line">            mode: <span class="string">'cors'</span>,</div><div class="line">            headers: &#123;</div><div class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></div><div class="line">            &#125;,</div><div class="line">            body:<span class="built_in">JSON</span>.stringify(body)</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">let</span> json = <span class="keyword">await</span> response.json();</div><div class="line">        <span class="keyword">return</span> json;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err)</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="前端登陆请求"><a href="#前端登陆请求" class="headerlink" title="前端登陆请求"></a>前端登陆请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;postFetch&#125; <span class="keyword">from</span> <span class="string">'../sources/ajax'</span>;</div><div class="line"><span class="keyword">async</span> linkLogin(e)&#123;</div><div class="line">    <span class="keyword">let</span> username = <span class="keyword">this</span>.refs.username.value;</div><div class="line">    <span class="keyword">let</span> password = <span class="keyword">this</span>.refs.password.value;</div><div class="line">    <span class="keyword">let</span> json = <span class="keyword">await</span> postFetch(<span class="string">'/login'</span>,&#123;</div><div class="line">      username,</div><div class="line">      password</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">if</span>(json.success)&#123;</div><div class="line">      Toast.success(<span class="string">"登陆成功"</span>);</div><div class="line">      <span class="keyword">this</span>.props.router.push(<span class="string">'/index'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      Toast.fail(json.message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Fetch&quot;&gt;&lt;a href=&quot;#Fetch&quot; class=&quot;headerlink&quot; title=&quot;Fetch&quot;&gt;&lt;/a&gt;Fetch&lt;/h3&gt;&lt;p&gt;Fetch API 是新一代的AJAX“Asynchronous JavaScript and XML”技术实现方案，它替代了长期以来一直被默认XMLHttpRequest作为了当前Web应用与服务端进行通信的基础的方案。Fetch API的优势在于可以明确的配置请求对象，以及利用Promise方法进行返回。&lt;/p&gt;
&lt;p&gt;npm安装依赖包:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install isomorphic-fetch --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Fetch" scheme="/categories/Fetch/"/>
    
      <category term="Cors" scheme="/categories/Fetch/Cors/"/>
    
    
      <category term="Fetch" scheme="/tags/Fetch/"/>
    
      <category term="Cors" scheme="/tags/Cors/"/>
    
  </entry>
  
  <entry>
    <title>个人项目介绍</title>
    <link href="/2017/05/21/Projects/"/>
    <id>/2017/05/21/Projects/</id>
    <published>2017-05-21T02:03:50.000Z</published>
    <updated>2017-05-22T02:41:09.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>个人项目介绍，还有一些私人外包就不再介绍，如有问题请留言评论欢迎探讨，或者直接扫描二维码添加微信。</p>
<h3 id="1-律动论坛"><a href="#1-律动论坛" class="headerlink" title="1.律动论坛"></a>1.律动论坛</h3><p><img src="/html/bbs.png" alt="bbs1"><br><img src="/html/bbs2.png" alt="bbs2"></p>
<p>GitHub 服务端代码库 : <a href="https://github.com/linkeyd/rhythm_server" target="_blank" rel="external">https://github.com/linkeyd/rhythm_server</a><br>GitHub 前端代码库 : <a href="https://github.com/linkeyd/bbs_client" target="_blank" rel="external">https://github.com/linkeyd/bbs_client</a></p>
<a id="more"></a>
<h3 id="2-律动用户中心"><a href="#2-律动用户中心" class="headerlink" title="2.律动用户中心"></a>2.律动用户中心</h3><p><img src="/html/usercenter.png" alt="usercenter"></p>
<p>律动用户中心 : <a href="http://usercenter.exdstudio.net/login.html" target="_blank" rel="external">http://usercenter.exdstudio.net/login.html</a></p>
<h3 id="3-律动魔方"><a href="#3-律动魔方" class="headerlink" title="3.律动魔方"></a>3.律动魔方</h3><p><img src="/html/rhythmCube.png" alt="rhythmCube"></p>
<p>律动魔方 : <a href="http://cube.exdstudio.net/show/index.html" target="_blank" rel="external">http://cube.exdstudio.net/show/index.html</a></p>
<h3 id="4-3arc中文教育应用"><a href="#4-3arc中文教育应用" class="headerlink" title="4.3arc中文教育应用"></a>4.3arc中文教育应用</h3><p><img src="/html/chGame.png" alt="3arc"><br><img src="/html/chGame2.png" alt="3arc2"><br>3arc中文学习软件 ：<a href="http://arc.3elogic.com.sg/#/auth" target="_blank" rel="external">http://arc.3elogic.com.sg/#/auth</a></p>
<h3 id="5-EZ-smart"><a href="#5-EZ-smart" class="headerlink" title="5.EZ-smart"></a>5.EZ-smart</h3><p><img src="/html/ezsmart.png" alt="EZ-smart"><br>EZ-smart网站 ：<a href="http://ezsmart.cn/" target="_blank" rel="external">http://ezsmart.cn/</a></p>
<h3 id="6-福州大学至诚学院实验室官网"><a href="#6-福州大学至诚学院实验室官网" class="headerlink" title="6.福州大学至诚学院实验室官网"></a>6.福州大学至诚学院实验室官网</h3><p><img src="/html/joinus.png" alt="lib"><br>福州大学至诚学院实验室官网 ：<a href="http://www.lember.cn/" target="_blank" rel="external">http://www.lember.cn/</a></p>
<h3 id="7-福州大学至诚学院CSS学习项目Dinner"><a href="#7-福州大学至诚学院CSS学习项目Dinner" class="headerlink" title="7.福州大学至诚学院CSS学习项目Dinner"></a>7.福州大学至诚学院CSS学习项目Dinner</h3><p><img src="/html/dinner.png" alt="lib"><br>福州大学至诚学院CSS学习项目Dinner ：<a href="http://diner.lember.cn/" target="_blank" rel="external">http://diner.lember.cn/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;个人项目介绍，还有一些私人外包就不再介绍，如有问题请留言评论欢迎探讨，或者直接扫描二维码添加微信。&lt;/p&gt;
&lt;h3 id=&quot;1-律动论坛&quot;&gt;&lt;a href=&quot;#1-律动论坛&quot; class=&quot;headerlink&quot; title=&quot;1.律动论坛&quot;&gt;&lt;/a&gt;1.律动论坛&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/html/bbs.png&quot; alt=&quot;bbs1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/html/bbs2.png&quot; alt=&quot;bbs2&quot;&gt;&lt;/p&gt;
&lt;p&gt;GitHub 服务端代码库 : &lt;a href=&quot;https://github.com/linkeyd/rhythm_server&quot;&gt;https://github.com/linkeyd/rhythm_server&lt;/a&gt;&lt;br&gt;GitHub 前端代码库 : &lt;a href=&quot;https://github.com/linkeyd/bbs_client&quot;&gt;https://github.com/linkeyd/bbs_client&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Projects" scheme="/categories/Projects/"/>
    
    
      <category term="Projects" scheme="/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>react-router 摘要</title>
    <link href="/2017/02/14/react-router/"/>
    <id>/2017/02/14/react-router/</id>
    <published>2017-02-14T05:31:34.000Z</published>
    <updated>2017-02-14T07:49:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.安装react-router:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-router --save</div></pre></td></tr></table></figure></p>
<p>2.在渲染输出的时候导入申明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Router, Route, IndexRoute, hashHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div></pre></td></tr></table></figure></p>
<p>3.初次使用react-router<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render((</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;hashHistory&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Login&#125;</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">    ),document.getElementById("app"));</div></pre></td></tr></table></figure></p>
<p>基础的申明一个路由节点，那么它有个根路径是一个Login的React Component组件。当浏览器输入这个根路径的时候将会自动加载该组件。<br><code>history={hashHistory}</code>使用的是在路由后面会随机生成一个hash值，如果不需要可以使用<code>browserHistory</code>，但是需要对WEB服务器进行配置， 如需部署上线请参考NGINX配置即可。<br><a id="more"></a><br>3.嵌套子路由节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"/a1"</span> component=&#123;AOneStep&#125;&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">IndexRoute</span> <span class="attr">component</span>=<span class="string">&#123;Number&#125;/</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/a1/radical"</span> <span class="attr">component</span>=<span class="string">&#123;Radical&#125;/</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用<code>&lt;Route&gt;</code>时候可以嵌套多个不同的路由，由多个模板和路径构成一组页面 <code>&lt;IndexRoute component={Number}/&gt;</code> 表示着在<code>path=&quot;/a1&quot;</code>的时候默认加载的一个路由。<br>React Code:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">       <span class="keyword">return</span> (</div><div class="line">           <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"container-fluid"</span>&gt;</span></span></div><div class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"row-panel"</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"col-xs-6"</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">Sentence</span> <span class="attr">handleData</span>=<span class="string">&#123;this.state.data&#125;</span> <span class="attr">image</span>=<span class="string">&#123;this.state.image&#125;/</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"col-xs-6"</span>&gt;</span></div><div class="line">                       &#123;this.props.children&#125;</div><div class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       )</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p><code>{this.props.children}</code>就是加载子路由的地方有点类似HTML <code>&lt;iframe/&gt;</code>而跳转多个不同的URL时会加载不同的component <code>&lt;Route path=&quot;/a1/radical&quot; component={Radical}/&gt;</code></p>
<p>4.路由地址转跳<br>在react-router中有多种可选的转跳方式:</p>
<p>4.1:返回上一个路由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hashHistory.goBack();</div></pre></td></tr></table></figure></p>
<p>4.2:跳转到某个路由节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hashHistory.push(<span class="string">'/struct'</span>);</div></pre></td></tr></table></figure></p>
<p>4.3：标签跳转<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&#123;<span class="string">`/tasks/foo`</span>&#125;&gt;foo task&lt;<span class="regexp">/Link&gt;</span></div></pre></td></tr></table></figure></p>
<p>5.在路由中带入参数<br>5.1 像需要转跳的节点<code>pathname</code>带入参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nextLocation = hashHistory.createLocation(&#123;</div><div class="line">                    pathname:  <span class="string">'/correct'</span>,</div><div class="line">                    state: &#123;number : card.id &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<p>在下一个组件中取出之前所传入的参数需要：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.location.state</div></pre></td></tr></table></figure></p>
<p>5.2 标签传入参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to = &#123;&#123;pathname:<span class="string">"category/"</span>,state:&#123;name:cate.name&#125;&#125;&#125; &gt;</div><div class="line">  go to</div><div class="line">&lt;<span class="regexp">/Link&gt;</span></div></pre></td></tr></table></figure></p>
<p>5.3 路由匹配带入参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Route component=&#123;Inbox&#125;&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"inbox/messages/:id"</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;</span> /&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>中间的<code>:id</code>匹配用户传入的任意参数我们可以通过子组件的<code>props</code>来获取参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.params</div></pre></td></tr></table></figure></p>
<p>路由Location属性<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">type Location = &#123;</div><div class="line">  pathname: Pathname;</div><div class="line">  search: QueryString;</div><div class="line">  query: Query;</div><div class="line">  state: LocationState;</div><div class="line">  action: Action;</div><div class="line">  key: LocationKey;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>6.当路由转跳的时候进入当前页面需要刷新页面，应当在子组件中触发<code>React componentDidUpdate</code>生命周期<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">componentDidUpdate(prevProps, prevState)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(prevProps)&#123;</div><div class="line">            stepsController.stepRadicalController(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Arrange Card Use Tip Formation</span></div><div class="line"></div><div class="line">        <span class="built_in">window</span>.arrangeCardUseTips();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>7.当我们需要在路由切换时带有一定的动画效果时，我们便需要 <code>react-addons-css-transition-group</code> 这个插件了。使用ReactCSSTransitionGroup组件来包含我们需要呈现动画效果的Component<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-addons-css-transition-group --save</div></pre></td></tr></table></figure></p>
<p>在路由最外层使用 React component:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">ReactCSSTransitionGroup</span></span></div><div class="line">        <span class="attr">component</span>=<span class="string">"div"</span></div><div class="line">        <span class="attr">transitionName</span>=<span class="string">"example"</span></div><div class="line">        <span class="attr">transitionEnter</span>= <span class="string">&#123;true&#125;</span></div><div class="line">        <span class="attr">transitionEnterTimeout</span>=<span class="string">&#123;500&#125;</span></div><div class="line">        <span class="attr">transitionLeaveTimeout</span>=<span class="string">&#123;500&#125;</span></div><div class="line">        &gt;</div><div class="line">          &#123;React.cloneElement(this.props.children, &#123;</div><div class="line">            key: this.props.location.pathname</div><div class="line">          &#125;)&#125;</div><div class="line">          //克隆所有子节点，单独的&#123;this.props.children&#125;没有动画效果</div><div class="line">        <span class="tag">&lt;/<span class="name">ReactCSSTransitionGroup</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.安装react-router:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install react-router --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.在渲染输出的时候导入申明&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;Router, Route, IndexRoute, hashHistory&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-router&#39;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.初次使用react-router&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ReactDOM.render((&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;history&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;hashHistory&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;Login&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Router&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ),document.getElementById(&quot;app&quot;));&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;基础的申明一个路由节点，那么它有个根路径是一个Login的React Component组件。当浏览器输入这个根路径的时候将会自动加载该组件。&lt;br&gt;&lt;code&gt;history={hashHistory}&lt;/code&gt;使用的是在路由后面会随机生成一个hash值，如果不需要可以使用&lt;code&gt;browserHistory&lt;/code&gt;，但是需要对WEB服务器进行配置， 如需部署上线请参考NGINX配置即可。&lt;br&gt;
    
    </summary>
    
      <category term="react-router" scheme="/categories/react-router/"/>
    
    
      <category term="react-router" scheme="/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>React antd-moblie for Webpack2.x 安装配置</title>
    <link href="/2017/01/30/antd-moblie-setting/"/>
    <id>/2017/01/30/antd-moblie-setting/</id>
    <published>2017-01-30T09:27:53.000Z</published>
    <updated>2017-02-14T07:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>npm install antd-mobile –save<br>npm install webpack –save<br>npm install babel-plugin-import –save<br>npm install postcss-pxtorem –save</p>
</blockquote>
<p>##使用<br>使用webpack设置中 resolve键设置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">               alias: &#123;</div><div class="line">                   actions: <span class="string">`<span class="subst">$&#123;this.srcPathAbsolute&#125;</span>/actions/`</span></div><div class="line">               &#125;,</div><div class="line">               extensions: [<span class="string">'.web.js'</span>,<span class="string">'jsx'</span>,<span class="string">'.js'</span>,<span class="string">'json'</span>],</div><div class="line">               modules: [</div><div class="line">                   path.join(__dirname, <span class="string">'../node_modules'</span>),</div><div class="line">                   <span class="string">'node_modules'</span></div><div class="line">               ]</div><div class="line">           &#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>更改 .babelrc文件配置信息，添加插件信息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"plugins"</span>: [[<span class="string">"import"</span>, &#123; <span class="string">"style"</span>: <span class="string">"css"</span>, <span class="string">"libraryName"</span>: <span class="string">"antd-mobile"</span> &#125;]]&#125;</div></pre></td></tr></table></figure></p>
<p>引入高清方案不让图像因为像素比例变得过大或者过小：<br>用脚本设置 html 的 viewport （不要再写 html meta 标签去设置 viewport）：在 html &gt; head 里<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  !<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">if</span>(i[a])<span class="keyword">return</span> i[a].exports;<span class="keyword">var</span> n=i[a]=&#123;exports:&#123;&#125;,id:a,loaded:!<span class="number">1</span>&#125;;<span class="keyword">return</span> e[a].call(n.exports,n,n.exports,t),n.loaded=!<span class="number">0</span>,n.exports&#125;<span class="keyword">var</span> i=&#123;&#125;;<span class="keyword">return</span> t.m=e,t.c=i,t.p=<span class="string">""</span>,t(<span class="number">0</span>)&#125;([<span class="function"><span class="keyword">function</span>(<span class="params">e,t</span>)</span>&#123;<span class="string">"use strict"</span>;<span class="built_in">Object</span>.defineProperty(t,<span class="string">"__esModule"</span>,&#123;value:!<span class="number">0</span>&#125;);<span class="keyword">var</span> i=<span class="built_in">window</span>;t[<span class="string">"default"</span>]=i.flex=<span class="function"><span class="keyword">function</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=e||<span class="number">100</span>,n=t||<span class="number">1</span>,r=i.document,o=navigator.userAgent,d=o.match(<span class="regexp">/Android[\S\s]+AppleWebkit\/(\d&#123;3&#125;)/i</span>),l=o.match(<span class="regexp">/U3\/((\d+|\.)&#123;5,&#125;)/i</span>),c=l&amp;&amp;<span class="built_in">parseInt</span>(l[<span class="number">1</span>].split(<span class="string">"."</span>).join(<span class="string">""</span>),<span class="number">10</span>)&gt;=<span class="number">80</span>,p=navigator.appVersion.match(<span class="regexp">/(iphone|ipad|ipod)/gi</span>),s=i.devicePixelRatio||<span class="number">1</span>;p||d&amp;&amp;d[<span class="number">1</span>]&gt;<span class="number">534</span>||c||(s=<span class="number">1</span>);<span class="keyword">var</span> u=<span class="number">1</span>/s,m=r.querySelector(<span class="string">'meta[name="viewport"]'</span>);m||(m=r.createElement(<span class="string">"meta"</span>),m.setAttribute(<span class="string">"name"</span>,<span class="string">"viewport"</span>),r.head.appendChild(m)),m.setAttribute(<span class="string">"content"</span>,<span class="string">"width=device-width,user-scalable=no,initial-scale="</span>+u+<span class="string">",maximum-scale="</span>+u+<span class="string">",minimum-scale="</span>+u),r.documentElement.style.fontSize=a/<span class="number">2</span>*s*n+<span class="string">"px"</span>&#125;,e.exports=t[<span class="string">"default"</span>]&#125;]);</div><div class="line">flex(<span class="number">100</span>, <span class="number">1</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>对于使用 webpack 的项目，在webpack.config.js里新增pxtorem配置、代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">           <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</div><div class="line">               test: <span class="regexp">/\.css$/</span>,</div><div class="line">               postcss: [</div><div class="line">                   pxtorem(&#123;</div><div class="line">                       rootValue: <span class="number">100</span>,</div><div class="line">                       propWhiteList: [],</div><div class="line">                   &#125;)</div><div class="line">               ],</div><div class="line">           &#125;)</div><div class="line">       ]</div></pre></td></tr></table></figure></p>
<p>到此antd-moblie webpack2.x设置完成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd-mobile'</span>;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span>&gt;</span>Start<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>, mountNode);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;npm install antd-mobile –save&lt;br&gt;npm install webpack –save&lt;br&gt;npm install babel-plugin-import –save&lt;br&gt;npm install postcss-pxtorem –save&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##使用&lt;br&gt;使用webpack设置中 resolve键设置：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;resolve: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               alias: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   actions: &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.srcPathAbsolute&amp;#125;&lt;/span&gt;/actions/`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               extensions: [&lt;span class=&quot;string&quot;&gt;&#39;.web.js&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;jsx&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;.js&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               modules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;../node_modules&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   &lt;span class=&quot;string&quot;&gt;&#39;node_modules&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="/categories/react/"/>
    
      <category term="webpack" scheme="/categories/react/webpack/"/>
    
    
      <category term="react" scheme="/tags/react/"/>
    
      <category term="webpack" scheme="/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Linux Ubuntu NodeJs项目部署（2）</title>
    <link href="/2017/01/26/linux-ubuntu-node-2/"/>
    <id>/2017/01/26/linux-ubuntu-node-2/</id>
    <published>2017-01-26T05:36:32.000Z</published>
    <updated>2017-01-26T05:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-session管理工具screen安装使用"><a href="#Linux-session管理工具screen安装使用" class="headerlink" title="Linux session管理工具screen安装使用"></a>Linux session管理工具screen安装使用</h2><p><code>apt-get install build-essential</code> 安装基础编译环境<br><code>apt-get install screen</code> 管理程序运行</p>
<blockquote>
<p>screen -S yourname -&gt; 新建一个叫yourname的session<br>screen -ls -&gt; 列出当前所有的session<br>screen -r yourname -&gt; 回到yourname这个session<br>screen -d yourname -&gt; 远程detach某个session<br>screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</p>
</blockquote>
<p>关闭或杀死窗口</p>
<p>正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用<code>C-a k</code>，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。</p>
<p>如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。</p>
<p>除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键<code>C-a</code> :，然后输入<code>quit</code>命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。<br>其实<code>C-a</code> :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入<code>split</code>等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。</p>
<p>到此我们的screen也完成了。<br><a id="more"></a></p>
<h2 id="Linux-nginx负载均衡与项目上线"><a href="#Linux-nginx负载均衡与项目上线" class="headerlink" title="Linux nginx负载均衡与项目上线"></a>Linux nginx负载均衡与项目上线</h2><p><code>apt-get install nginx</code> 安装nginx反向代理工具<br><code>screen -S yourname</code> -&gt; 新建一个叫yourname的session，创建好可以新进程之后。<br><code>cd xx/xx/xx(你的项目路径下node启动接口处)</code> 执行<code>node project</code>这时候。<br><code>cd /etc/nginx/conf.d</code>进入该目录文件，执行<code>nano xxx.conf</code>创建一个新的文件写入如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"></div><div class="line">  listen 80;</div><div class="line"></div><div class="line">  server_name xxx(你的域名);</div><div class="line">  access_log /var/log/nginx/xxx.log;</div><div class="line"></div><div class="line">  location / &#123;</div><div class="line">    proxy_pass http://localhost:8000/(你的项目的地址和端口号);</div><div class="line">    proxy_http_version 1.1;</div><div class="line">    proxy_set_header Upgrade $http_upgrade;</div><div class="line">    proxy_set_header Connection &apos;upgrade&apos;;</div><div class="line">    proxy_set_header Host $host;</div><div class="line">    proxy_cache_bypass $http_upgrade;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>sudo nginx -s reload</code>：重启nginx，之后输入你的域名就可以看到你的项目。</p>
<h2 id="SSH2简要安装介绍"><a href="#SSH2简要安装介绍" class="headerlink" title="SSH2简要安装介绍"></a>SSH2简要安装介绍</h2><p>一、安装客户端<br>Ubuntu缺省已经安装了ssh client。<br>sudo apt-get install ssh  或者 sudo apt-get installopenssh-client</p>
<blockquote>
<p>ssh –p 22 root@192.168.1.1<br>输入root用户的密码</p>
</blockquote>
<p>二、安装服务端<br>Ubuntu缺省没有安装SSH Server，使用以下命令安装：</p>
<blockquote>
<p>sudo apt-get install openssh-server<br>然后确认sshserver是否启动了：（或用“netstat -tlp”命令）<br>ps -e|grep ssh<br>如果只有ssh-agent那ssh-server还没有启动，需要/etc/init.d/ssh start，如果看到sshd那说明ssh-server已经启动了。<br>如果没有则可以这样启动：<br><code>sudo/etc/init.d/ssh start</code></p>
</blockquote>
<p>添加用户</p>
<blockquote>
<p>   adduser xujun</p>
</blockquote>
<p>三、SSH服务命令</p>
<blockquote>
<p>停止服务：sudo /etc/init.d/ssh stop<br>启动服务：sudo /etc/init.d/ssh start<br>重启服务：sudo /etc/init.d/sshresart<br>断开连接：exit<br>登录：sshroot@192.168.0.100 </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux-session管理工具screen安装使用&quot;&gt;&lt;a href=&quot;#Linux-session管理工具screen安装使用&quot; class=&quot;headerlink&quot; title=&quot;Linux session管理工具screen安装使用&quot;&gt;&lt;/a&gt;Linux session管理工具screen安装使用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;apt-get install build-essential&lt;/code&gt; 安装基础编译环境&lt;br&gt;&lt;code&gt;apt-get install screen&lt;/code&gt; 管理程序运行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;screen -S yourname -&amp;gt; 新建一个叫yourname的session&lt;br&gt;screen -ls -&amp;gt; 列出当前所有的session&lt;br&gt;screen -r yourname -&amp;gt; 回到yourname这个session&lt;br&gt;screen -d yourname -&amp;gt; 远程detach某个session&lt;br&gt;screen -d -r yourname -&amp;gt; 结束当前session并回到yourname这个session&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关闭或杀死窗口&lt;/p&gt;
&lt;p&gt;正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用&lt;code&gt;C-a k&lt;/code&gt;，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。&lt;/p&gt;
&lt;p&gt;如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。&lt;/p&gt;
&lt;p&gt;除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键&lt;code&gt;C-a&lt;/code&gt; :，然后输入&lt;code&gt;quit&lt;/code&gt;命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。&lt;br&gt;其实&lt;code&gt;C-a&lt;/code&gt; :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入&lt;code&gt;split&lt;/code&gt;等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。&lt;/p&gt;
&lt;p&gt;到此我们的screen也完成了。&lt;br&gt;
    
    </summary>
    
      <category term="node" scheme="/categories/node/"/>
    
      <category term="linux" scheme="/categories/node/linux/"/>
    
      <category term="ubuntu" scheme="/categories/node/linux/ubuntu/"/>
    
    
      <category term="node" scheme="/tags/node/"/>
    
      <category term="linux" scheme="/tags/linux/"/>
    
      <category term="ubuntu" scheme="/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux Ubuntu NodeJs项目部署（1）</title>
    <link href="/2017/01/20/linux-unbuntu-node-1/"/>
    <id>/2017/01/20/linux-unbuntu-node-1/</id>
    <published>2017-01-20T05:33:29.000Z</published>
    <updated>2017-01-26T05:37:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>##Linux Ubuntu 基本操作说明<br>首先使用基础命令:<br><code>tab</code> 按键可以快速补全你的单词和查找目标<br><code>ls</code> 查看当前目录下的文件<br><code>ps -ef | grep xxx</code> 查看当前进程<br><code>kill [PID]</code> 杀死PID的进程<br><code>sudo apt-get install xxx</code> 快速安装某个包<br><code>nano</code> ubuntu下的文本编辑器个人而言比vim好用<br>在执行linux服务器的时候我们可以使用SSH2通过putty或者CRT等远程链接工具进入SSH2。<br><a id="more"></a></p>
<p>##NodeJs安装<br>刚开始我们需要安装基本的nodeJs编译环境我们可以通过下载官网的linux版本进行安装，这里我们不建议通过<code>sudo apt-get install</code>进行安装。下载Linux Binaries版本的NodeJs node-v4.4.4-linux-x64.tar.xz(版本并不是唯一)<br>解压:<br>tar -xJf node-v4.4.4-linux-x64.tar.xz<br>移到通用的软件安装目录 /opt/(此步骤可以不用操作):<br>sudo mv node-v4.4.4-linux-x64 /opt/</p>
<p>安装 npm 和 node 注册系统命令:<br>sudo ln -s /opt/node-v4.4.4-linux-x64/bin/node /usr/local/bin/node<br>sudo ln -s /opt/node-v4.4.4-linux-x64/bin/npm /usr/local/bin/npm</p>
<p>测试：<br><code>node -v</code><br>v4.4.4</p>
<p><code>npm -v</code><br>2.15.1</p>
<p>NodeJs到此步骤安装完成，可以输入命令Node进行开始Node编码。</p>
<p>##Mysql 安装<br>安装好Node之后我们接下来要对数据库进行安装，本人使用的是mysql数据下面就简要的说明下mysql数据库的安装,执行包安装命令 <code>sudo apt-get install mysql-server</code></p>
<p>1.安装mysql<br> <code>sudo apt-get install mysql</code></p>
<p>2.测试mysql<br> <code>mysql -u root -p</code><br>输入密码  进入</p>
<p> <code>exit;</code> 退出</p>
<p>3.开启远程访问控制<br> <code>sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf or  /etc/mysql/my.cnf</code> 找到  <code>bind-address = 127.0.0.1</code> 对其进行注释 <code>#bind-address = 127.0.0.1</code></p>
<p> <code>^X</code>  退出保存</p>
<p>4.设置账号权限允许远程访问</p>
<p> <code>mysql -u root -p</code><br>进入Mysql后输入命令：<br> <code>grant all on *.* to root@&#39;%&#39; identified by &#39;你的密码&#39;;</code><br> <code>flush privileges;</code><br> <code>exit;</code><br> <code>sudo /etc/init.d/mysql restart</code></p>
<p>5.设置MYSQL UTF-8编码防止数据库乱码<br>登录MySQL查看用SHOW VARIABLES LIKE ‘character%’;下字符集，显示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+--------------------------+----------------------------+</div><div class="line">| Variable_name | Value |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character_set_client | utf8 |</div><div class="line">| character_set_connection | utf8 |</div><div class="line">| character_set_database | latin1 |</div><div class="line">| character_set_filesystem | binary |</div><div class="line">| character_set_results | utf8 |</div><div class="line">| character_set_server | latin1 |</div><div class="line">| character_set_system | utf8 |</div><div class="line">| character_sets_dir | /usr/share/mysql/charsets/ |</div><div class="line">+--------------------------+----------------------------+</div></pre></td></tr></table></figure></p>
<p>此时character_set_database和character_set_server的默认字符集还是latin1。<br>打开   <code>nano /etc/mysql/mysql.conf.d/mysqld.cnf</code><br>在[mysqld]字段里加入character-set-server=utf8，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">port = 3306</div><div class="line">socket = /var/lib/mysql/mysql.sock</div><div class="line">character-set-server=utf8</div></pre></td></tr></table></figure></p>
<p><code>nano /etc/mysql/conf.d/mysql.cnf</code></p>
<p>在[mysql]字段里加入default-character-set=utf8，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line">no-auto-rehash</div><div class="line">default-character-set=utf8</div></pre></td></tr></table></figure></p>
<p><code>service mysql restart</code>重启mysql服务就生效</p>
<p>SHOW VARIABLES LIKE ‘character%’;查看，发现数据库编码全已改成utf8。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+--------------------------+----------------------------+</div><div class="line">| Variable_name | Value |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character_set_client | utf8 |</div><div class="line">| character_set_connection | utf8 |</div><div class="line">| character_set_database | utf8 |</div><div class="line">| character_set_filesystem | binary |</div><div class="line">| character_set_results | utf8 |</div><div class="line">| character_set_server | utf8 |</div><div class="line">| character_set_system | utf8 |</div><div class="line">| character_sets_dir | /usr/share/mysql/charsets/ |</div><div class="line">+--------------------------+----------------------------+</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Linux Ubuntu 基本操作说明&lt;br&gt;首先使用基础命令:&lt;br&gt;&lt;code&gt;tab&lt;/code&gt; 按键可以快速补全你的单词和查找目标&lt;br&gt;&lt;code&gt;ls&lt;/code&gt; 查看当前目录下的文件&lt;br&gt;&lt;code&gt;ps -ef | grep xxx&lt;/code&gt; 查看当前进程&lt;br&gt;&lt;code&gt;kill [PID]&lt;/code&gt; 杀死PID的进程&lt;br&gt;&lt;code&gt;sudo apt-get install xxx&lt;/code&gt; 快速安装某个包&lt;br&gt;&lt;code&gt;nano&lt;/code&gt; ubuntu下的文本编辑器个人而言比vim好用&lt;br&gt;在执行linux服务器的时候我们可以使用SSH2通过putty或者CRT等远程链接工具进入SSH2。&lt;br&gt;
    
    </summary>
    
      <category term="node" scheme="/categories/node/"/>
    
      <category term="linux" scheme="/categories/node/linux/"/>
    
      <category term="ubuntu" scheme="/categories/node/linux/ubuntu/"/>
    
    
      <category term="node" scheme="/tags/node/"/>
    
      <category term="linux" scheme="/tags/linux/"/>
    
      <category term="ubuntu" scheme="/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>HTTP简介</title>
    <link href="/2016/12/19/node-http/"/>
    <id>/2016/12/19/node-http/</id>
    <published>2016-12-19T09:18:09.000Z</published>
    <updated>2016-12-19T09:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><h3 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h3><p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。目前大部分应用开发都使用HTTP协议，如今无论是前端工程师，服务端工程师都要熟知HTTP协议。今天普遍使用的一个版本——HTTP 1.1。电商等大型科技公司使用的是——HTTPS。最新的HTTP版本于2015年发布为——HTTP2.0。</p>
<h3 id="HTTP浅析"><a href="#HTTP浅析" class="headerlink" title="HTTP浅析"></a>HTTP浅析</h3><p>HTTP是一个客户端和服务器端请求和应答的标准。是客户端，服务器端应答机制。HTTP是客户端发起一个到服务器上指定端口（默认端口为80）的HTTP请求。服务端获得请求进行相关处理最后在返回给客户端。例如：我们在浏览器的地址栏里输入的网站地址叫做URL (Uniform Resource Locator，统一资源定位符)。就像每家每户都有一个门牌地址一样，每个网页也都有一个Internet地址。而每个网页中每个资源都有一个HTTP请求来动态展示HTML。<br><a id="more"></a></p>
<h3 id="HTTP请求分析"><a href="#HTTP请求分析" class="headerlink" title="HTTP请求分析"></a>HTTP请求分析</h3><p><img src="/html/http.png" alt="tool-editor"></p>
<p>这是一段关于获取用户数据的请求。</p>
<h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><ol>
<li><code>Request URL</code>这个是关于HTTP请求的一个URL，定位到的是一个请求的链接地址。指向后台发出某种动作，这种动作是服务端已经编写完成的。例如此URL获取用户数据。</li>
<li><code>Request Method</code>HTTP的请求方法，在传统的HTTP请求中常用的方法有<code>post</code> <code>get</code><br>具体的请参考<a href="http://www.w3school.com.cn/tags/html_ref_httpmethods.asp" target="_blank" rel="external">HTTP 方法：GET 对比 POST</a><br>在HTTP 1.1之后Rest规范化之后又出现了 <code>put</code> <code>delete</code>等方法。具体参考<code>Rest模式开发</code>.</li>
<li><p><code>Status Code</code>是一个三个数字的结果代码。Reason-Phrase给Status-Code提供一个简单的文本描述。Status-Code主要用于机器自动识别，Reason-Phrase主要用于帮助用户理解。Status-Code的第一个数字定义响应的类别，后两个数字没有分类的作用。第一个数字可能取5个不同的值：</p>
<blockquote>
<ul>
<li>1xx:信息响应类，表示接收到请求并且继续处理</li>
<li>2xx:处理成功响应类，表示动作被成功接收、理解和接受（200）</li>
<li>3xx:重定向响应类，为了完成指定的动作，必须接受进一步处理（304）</li>
<li>4xx:客户端错误，客户请求包含语法错误或者是不能正确执行(404)</li>
<li>5xx:服务端错误，服务器不能正确执行一个正确的请求（500，502）</li>
</ul>
</blockquote>
</li>
<li><p><code>Remote Address</code> 当前客户机的地址，该地址由主机IP地址：端口号  组成。</p>
</li>
</ol>
<h4 id="Request-Headers"><a href="#Request-Headers" class="headerlink" title="Request Headers"></a>Request Headers</h4><p>代表用户提交的参数请求，POST提交的时候我们一般是用键值对的形式提交一组参数<code>{key:value}</code>在GET方法的时候我们有时候会采用 <code>http://url?key=value</code> 的形式将一个链接带参数提交。</p>
<h4 id="Query-String-Parameters"><a href="#Query-String-Parameters" class="headerlink" title="Query String Parameters"></a>Query String Parameters</h4><p>代表的是返回的参数值，<code>respone</code>我们在提交一段URL请求给后台的时候，后台服务器端将通过路由去匹配URL所负责的代码方法，当代码处理完成的时候后台服务端将会将值通过<code>res</code>的形式进行返回常见的方案有通过 <code>String</code>和<code>json</code>还有<code>XML</code>格式，而目前普遍最通用的无疑是<code>JSON</code>格式的数据，它是一段<code>key:value</code>的形式<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">status: 200,</div><div class="line">message: [&#123;</div><div class="line">      username: "test", </div><div class="line">      password: "lanling", id: 1</div><div class="line">      &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP-协议&quot;&gt;&lt;a href=&quot;#HTTP-协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP 协议&quot;&gt;&lt;/a&gt;HTTP 协议&lt;/h2&gt;&lt;h3 id=&quot;HTTP简介&quot;&gt;&lt;a href=&quot;#HTTP简介&quot; class=&quot;headerlink&quot; title=&quot;HTTP简介&quot;&gt;&lt;/a&gt;HTTP简介&lt;/h3&gt;&lt;p&gt;超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。目前大部分应用开发都使用HTTP协议，如今无论是前端工程师，服务端工程师都要熟知HTTP协议。今天普遍使用的一个版本——HTTP 1.1。电商等大型科技公司使用的是——HTTPS。最新的HTTP版本于2015年发布为——HTTP2.0。&lt;/p&gt;
&lt;h3 id=&quot;HTTP浅析&quot;&gt;&lt;a href=&quot;#HTTP浅析&quot; class=&quot;headerlink&quot; title=&quot;HTTP浅析&quot;&gt;&lt;/a&gt;HTTP浅析&lt;/h3&gt;&lt;p&gt;HTTP是一个客户端和服务器端请求和应答的标准。是客户端，服务器端应答机制。HTTP是客户端发起一个到服务器上指定端口（默认端口为80）的HTTP请求。服务端获得请求进行相关处理最后在返回给客户端。例如：我们在浏览器的地址栏里输入的网站地址叫做URL (Uniform Resource Locator，统一资源定位符)。就像每家每户都有一个门牌地址一样，每个网页也都有一个Internet地址。而每个网页中每个资源都有一个HTTP请求来动态展示HTML。&lt;br&gt;
    
    </summary>
    
      <category term="HTTP" scheme="/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>nodeJs结合Mysql数据库与前端Ajax登陆实例</title>
    <link href="/2016/09/21/node-mvc-demo/"/>
    <id>/2016/09/21/node-mvc-demo/</id>
    <published>2016-09-21T06:06:02.000Z</published>
    <updated>2016-09-21T07:42:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NodeJs-express框架-MVC结合Mysql数据库与前端Ajax登陆实例"><a href="#NodeJs-express框架-MVC结合Mysql数据库与前端Ajax登陆实例" class="headerlink" title="NodeJs(express框架) MVC结合Mysql数据库与前端Ajax登陆实例"></a>NodeJs(express框架) MVC结合Mysql数据库与前端Ajax登陆实例</h2><p>本实例我们使用NodeJs作为服务端链接Mysql数据库，前端使用Ajax操作.获取的数据格式为Json形式.该用例下载地址github:<a href="https://github.com/linkeyd/nodeMysql" target="_blank" rel="external">nodeMysql</a></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>创建一个Mysql <code>Test</code>数据库表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for `user`</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</div><div class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of user</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'test'</span>, <span class="string">'lanling'</span>, <span class="string">'1'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>我们使用NodeJs带的NPM包安装相关库文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install mysql --save</div><div class="line">npm install express --save</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="创建models文件夹"><a href="#创建models文件夹" class="headerlink" title="创建models文件夹"></a>创建models文件夹</h4><p>models文件夹中创建<code>connection.js</code>链接数据库实例,链接数据库.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);<span class="comment">//引用mysql包</span></div><div class="line"><span class="keyword">var</span> connection = mysql.createPool(&#123;</div><div class="line">    host: <span class="string">'127.0.0.1'</span>,<span class="comment">//主机地址</span></div><div class="line">    port: <span class="string">'3306'</span>,<span class="comment">//端口号</span></div><div class="line">    database: <span class="string">'test'</span>,<span class="comment">//数据库</span></div><div class="line">    user: <span class="string">'root'</span>,<span class="comment">//数据库账号</span></div><div class="line">    password: <span class="string">'root'</span><span class="comment">//数据库密码</span></div><div class="line">&#125;);</div><div class="line">connection.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err,connection</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err)&#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"database link success"</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports = connection;</div></pre></td></tr></table></figure></p>
<p>models文件夹中创建<code>userModel.js</code>,进行数据库语句操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connection = <span class="built_in">require</span>(<span class="string">'./connection'</span>);</div><div class="line"><span class="keyword">var</span> UserModel = <span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</div><div class="line">&#125;;</div><div class="line">UserModel.Login = <span class="function"><span class="keyword">function</span>(<span class="params">username,password,cb</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> selectResult = <span class="string">'select * from user where username=? and password=?'</span>;</div><div class="line">     <span class="comment">/**</span></div><div class="line">     * query(数据库语句,?中参数,结果集)</div><div class="line">     */</div><div class="line">    connection.query(selectResult,[username,password],<span class="function"><span class="keyword">function</span> (<span class="params">error,result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(error)&#123;</div><div class="line">            <span class="built_in">console</span>.log(error);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!result)&#123;</div><div class="line">                <span class="keyword">return</span> cb(error,<span class="literal">null</span>);<span class="comment">//callback函数。查找sql的结果给controller执行结果</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> cb(error,result);<span class="comment">//callback函数。查找sql的结果给controller执行结果</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = UserModel;</div></pre></td></tr></table></figure></p>
<h4 id="建立controller文件夹"><a href="#建立controller文件夹" class="headerlink" title="建立controller文件夹"></a>建立controller文件夹</h4><p>controller文件夹中创建<code>userController.js</code>文件.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userModel = <span class="built_in">require</span>(<span class="string">'../models/userModel'</span>);</div><div class="line"><span class="keyword">var</span> UserController = &#123;</div><div class="line">  login : <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> username = req.body.username;<span class="comment">//获取前端提交的数据</span></div><div class="line">      <span class="keyword">var</span> password = req.body.password;<span class="comment">//获取前端提交的数据</span></div><div class="line">      <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span>(result.length == <span class="number">0</span>)&#123;</div><div class="line">              res.json(&#123;status:<span class="number">1001</span>,message:<span class="string">"账号或密码错误"</span>&#125;);<span class="comment">//返回给前端的数据</span></div><div class="line">          &#125;</div><div class="line">          <span class="keyword">else</span>&#123;</div><div class="line">              res.json(&#123;status:<span class="number">200</span>,message:result&#125;);<span class="comment">//返回给前端的数据</span></div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line">      userModel.Login(username,password,callback);<span class="comment">//执行userModel的SQL</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = UserController;</div></pre></td></tr></table></figure></p>
<h4 id="建立routers文件夹"><a href="#建立routers文件夹" class="headerlink" title="建立routers文件夹"></a>建立routers文件夹</h4><p>routers文件夹中新建<code>userRoute.js</code>文件，发送<code>post,get</code>请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"><span class="keyword">var</span> userController = <span class="built_in">require</span>(<span class="string">'../controller/userController'</span>);</div><div class="line"><span class="comment">//开始链接到login.html文件</span></div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.redirect(<span class="string">'login.html'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//login post请求</span></div><div class="line">router.post(<span class="string">'/login'</span>,userController.login);</div><div class="line"><span class="built_in">module</span>.exports =router;</div></pre></td></tr></table></figure></p>
<p><code>app.js</code>配置路由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = <span class="built_in">require</span>(<span class="string">'./routes/userRoute'</span>);</div><div class="line">app.use(<span class="string">'/users'</span>, users);</div></pre></td></tr></table></figure></p>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>建立public文件夹<br>新建<code>login.html</code></p>
<h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-data"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> username = <span class="built_in">document</span>.querySelector(<span class="string">'#username'</span>).value;<span class="comment">//获取账号输入数据</span></div><div class="line">    <span class="keyword">var</span> password = <span class="built_in">document</span>.querySelector(<span class="string">'#password'</span>).value;<span class="comment">//获取密码输入数据</span></div><div class="line">    <span class="comment">//ajax异步执行成功后返回的数据结果</span></div><div class="line">    <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(data.status == <span class="number">200</span>)&#123;</div><div class="line">            alert(<span class="string">"登陆成功"</span>);</div><div class="line">            <span class="built_in">document</span>.querySelector(<span class="string">'#html'</span>).innerHTML = <span class="string">"您登陆的账号ID为:"</span>+data.message[<span class="number">0</span>].id;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            alert(<span class="string">"登陆失败"</span>);</div><div class="line">            <span class="built_in">document</span>.querySelector(<span class="string">'#html'</span>).innerHTML = data.message;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    ajax(&#123;</div><div class="line">      url : <span class="string">'/login'</span>,<span class="comment">//执行router url请求</span></div><div class="line">      type:<span class="string">'POST'</span>,<span class="comment">//请求类型</span></div><div class="line">      dataType:<span class="string">'json'</span>,</div><div class="line">      data:&#123;username:username,password:password&#125;,<span class="comment">//request提交给后台数据</span></div><div class="line">      success:callback,</div><div class="line">      error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(err);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="js-ajax模块"><a href="#js-ajax模块" class="headerlink" title="js ajax模块"></a>js ajax模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    options = options || &#123;&#125;;</div><div class="line"></div><div class="line">    options.type = (options.type || <span class="string">'GET'</span>).toUpperCase();<span class="comment">//toUpperCase 大小写转化,默认全部转化成大写</span></div><div class="line">    options.dataType = options.dataType || <span class="string">'json'</span>;</div><div class="line">    <span class="keyword">var</span> params = formatParams(options.data);</div><div class="line">    <span class="comment">//创建非IE6 AJAX请求</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//连接和发送</span></div><div class="line">    <span class="keyword">if</span> (options.type == <span class="string">'GET'</span>) &#123;</div><div class="line">        xhr.open(<span class="string">'GET'</span>, options.url + <span class="string">'?'</span> + params, <span class="literal">true</span>);</div><div class="line">        xhr.send(<span class="literal">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.type == <span class="string">'POST'</span>) &#123;</div><div class="line">        xhr.open(<span class="string">'POST'</span>, options.url, <span class="literal">true</span>);</div><div class="line">        <span class="comment">//提交表单设置的内容类型</span></div><div class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line">        xhr.send(params);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//接收请求</span></div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">var</span> status = xhr.status;</div><div class="line">            <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>) &#123;</div><div class="line">                options.success &amp;&amp; options.success(<span class="built_in">JSON</span>.parse(xhr.responseText), xhr.responseXML);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                options.error &amp;&amp; options.error(status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="comment">//将请求的对象转化成url</span></div><div class="line"><span class="keyword">var</span> formatParams = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> data) &#123;</div><div class="line">        arr.push(<span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[name]));</div><div class="line">    &#125;</div><div class="line">    arr.push((<span class="string">'v='</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>, <span class="string">''</span>));</div><div class="line">    <span class="keyword">return</span> arr.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NodeJs-express框架-MVC结合Mysql数据库与前端Ajax登陆实例&quot;&gt;&lt;a href=&quot;#NodeJs-express框架-MVC结合Mysql数据库与前端Ajax登陆实例&quot; class=&quot;headerlink&quot; title=&quot;NodeJs(express框架) MVC结合Mysql数据库与前端Ajax登陆实例&quot;&gt;&lt;/a&gt;NodeJs(express框架) MVC结合Mysql数据库与前端Ajax登陆实例&lt;/h2&gt;&lt;p&gt;本实例我们使用NodeJs作为服务端链接Mysql数据库，前端使用Ajax操作.获取的数据格式为Json形式.该用例下载地址github:&lt;a href=&quot;https://github.com/linkeyd/nodeMysql&quot;&gt;nodeMysql&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h3&gt;&lt;p&gt;创建一个Mysql &lt;code&gt;Test&lt;/code&gt;数据库表&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ----------------------------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Table structure for `user`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ----------------------------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`user`&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`user`&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`username`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`password`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt; AUTO_INCREMENT=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CHARSET&lt;/span&gt;=utf8;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ----------------------------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Records of user&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ----------------------------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`user`&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;lanling&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h3&gt;&lt;p&gt;我们使用NodeJs带的NPM包安装相关库文件。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install mysql --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install express --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="/categories/mysql/"/>
    
      <category term="nodeJs" scheme="/categories/mysql/nodeJs/"/>
    
      <category term="mvc" scheme="/categories/mysql/nodeJs/mvc/"/>
    
      <category term="ajax" scheme="/categories/mysql/nodeJs/mvc/ajax/"/>
    
    
      <category term="nodeJs" scheme="/tags/nodeJs/"/>
    
      <category term="mvc" scheme="/tags/mvc/"/>
    
      <category term="ajax" scheme="/tags/ajax/"/>
    
      <category term="mysql" scheme="/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MVC and Ajax</title>
    <link href="/2016/09/21/mvc-ajax/"/>
    <id>/2016/09/21/mvc-ajax/</id>
    <published>2016-09-21T05:46:09.000Z</published>
    <updated>2016-09-21T07:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC浅析"><a href="#MVC浅析" class="headerlink" title="MVC浅析"></a>MVC浅析</h2><h3 id="MVC简介"><a href="#MVC简介" class="headerlink" title="MVC简介"></a>MVC简介</h3><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写。是一种用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。MVC 分层有助于管理复杂的应用程序，可以结合AJAX前后端分离，让服务端成员在没有视图的基础上也可以进行用例测试。</p>
<h3 id="MVC功能"><a href="#MVC功能" class="headerlink" title="MVC功能"></a>MVC功能</h3><ol>
<li><strong>Model</strong>（模型）是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据,和创建数据库模型。</li>
<li><strong>View</strong>（视图）是应用程序中处理数据显示的部分。通常视图是HTML等图形显示部分（前端部分）。</li>
<li><strong>Controller</strong>（控制器）是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。而在现代模型中服务端工程师与前端工程师都要负责 <strong>Controller</strong>部分代码，服务端主要的表现形式为request获取前端用户数据和respond前端返回前端数据，前端主要表现为AJAX发送用户数据，Callback回调成功服务端数据通过数据修改视图显示状态。<a id="more"></a>
</li>
</ol>
<h3 id="MVC结构图"><a href="#MVC结构图" class="headerlink" title="MVC结构图"></a>MVC结构图</h3><p><img src="/html/mvc.jpg" alt="tool-editor"></p>
<h2 id="Ajax浅析"><a href="#Ajax浅析" class="headerlink" title="Ajax浅析"></a>Ajax浅析</h2><h3 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h3><p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是一种前端技术，它可以实现在不刷新页面的情况下修改DOM即可观察到页面数据的变化，是一种动态网页技术，在目前MXL基本被JSON替代。在传统编程中我们大量接触的是同步编程，而Ajax是一种异步编程方式。所谓的同步和异步在很大的区别上是指执行顺序的不同。</p>
<h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><p>json是一种数据格式，它的主要构成是一个<code>{key:value}</code>键值对形式，<code>value</code>可嵌套数组和继续嵌套键值对等，是一种易解析且易组成复杂数据的数据格式。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">status: 200,</div><div class="line">message: [&#123;</div><div class="line">      username: "test", </div><div class="line">      password: "lanling", id: 1</div><div class="line">      &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>假定A语句，B语句，C语句，D语句呈队列排序。每条语句的执行顺序为2S,1S,1.5S,0.5S.<br>同步编程执行顺序:A-&gt;B-&gt;C-&gt;D<br>异步执行顺序：A,B,C,D 同时进行，无先后执行顺序。</p>
<h3 id="synchronous-同步-asynchronous（异步）执行顺序图"><a href="#synchronous-同步-asynchronous（异步）执行顺序图" class="headerlink" title="synchronous(同步)asynchronous（异步）执行顺序图"></a>synchronous(同步)asynchronous（异步）执行顺序图</h3><p><img src="/html/async.png" alt="tool-editor"></p>
<h3 id="js-Ajax实现"><a href="#js-Ajax实现" class="headerlink" title="js Ajax实现"></a>js Ajax实现</h3><p>js ajax模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    options = options || &#123;&#125;;</div><div class="line"></div><div class="line">    options.type = (options.type || <span class="string">'GET'</span>).toUpperCase();<span class="comment">//toUpperCase 大小写转化,默认全部转化成大写</span></div><div class="line">    options.dataType = options.dataType || <span class="string">'json'</span>;</div><div class="line">    <span class="keyword">var</span> params = formatParams(options.data);</div><div class="line">    <span class="comment">//创建非IE6 AJAX请求</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//连接和发送</span></div><div class="line">    <span class="keyword">if</span> (options.type == <span class="string">'GET'</span>) &#123;</div><div class="line">        xhr.open(<span class="string">'GET'</span>, options.url + <span class="string">'?'</span> + params, <span class="literal">true</span>);</div><div class="line">        xhr.send(<span class="literal">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.type == <span class="string">'POST'</span>) &#123;</div><div class="line">        xhr.open(<span class="string">'POST'</span>, options.url, <span class="literal">true</span>);</div><div class="line">        <span class="comment">//提交表单设置的内容类型</span></div><div class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line">        xhr.send(params);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//接收请求</span></div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">var</span> status = xhr.status;</div><div class="line">            <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>) &#123;</div><div class="line">                options.success &amp;&amp; options.success(<span class="built_in">JSON</span>.parse(xhr.responseText), xhr.responseXML);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                options.error &amp;&amp; options.error(status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="comment">//将请求的对象转化成url</span></div><div class="line"><span class="keyword">var</span> formatParams = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> data) &#123;</div><div class="line">        arr.push(<span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[name]));</div><div class="line">    &#125;</div><div class="line">    arr.push((<span class="string">'v='</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>, <span class="string">''</span>));</div><div class="line">    <span class="keyword">return</span> arr.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   ajax(&#123;</div><div class="line">      url : <span class="string">'/login'</span>,<span class="comment">//执行router url请求</span></div><div class="line">      type:<span class="string">'POST'</span>,<span class="comment">//请求类型</span></div><div class="line">      dataType:<span class="string">'json'</span>,</div><div class="line">      data:&#123;username:username,password:password&#125;,<span class="comment">//request提交给后台数据</span></div><div class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">      &#125;,</div><div class="line">      error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(err);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MVC浅析&quot;&gt;&lt;a href=&quot;#MVC浅析&quot; class=&quot;headerlink&quot; title=&quot;MVC浅析&quot;&gt;&lt;/a&gt;MVC浅析&lt;/h2&gt;&lt;h3 id=&quot;MVC简介&quot;&gt;&lt;a href=&quot;#MVC简介&quot; class=&quot;headerlink&quot; title=&quot;MVC简介&quot;&gt;&lt;/a&gt;MVC简介&lt;/h3&gt;&lt;p&gt;MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写。是一种用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。MVC 分层有助于管理复杂的应用程序，可以结合AJAX前后端分离，让服务端成员在没有视图的基础上也可以进行用例测试。&lt;/p&gt;
&lt;h3 id=&quot;MVC功能&quot;&gt;&lt;a href=&quot;#MVC功能&quot; class=&quot;headerlink&quot; title=&quot;MVC功能&quot;&gt;&lt;/a&gt;MVC功能&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;（模型）是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据,和创建数据库模型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;（视图）是应用程序中处理数据显示的部分。通常视图是HTML等图形显示部分（前端部分）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt;（控制器）是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。而在现代模型中服务端工程师与前端工程师都要负责 &lt;strong&gt;Controller&lt;/strong&gt;部分代码，服务端主要的表现形式为request获取前端用户数据和respond前端返回前端数据，前端主要表现为AJAX发送用户数据，Callback回调成功服务端数据通过数据修改视图显示状态。
    
    </summary>
    
      <category term="mvc" scheme="/categories/mvc/"/>
    
      <category term="ajax" scheme="/categories/mvc/ajax/"/>
    
    
      <category term="mvc" scheme="/tags/mvc/"/>
    
      <category term="ajax" scheme="/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>javascript面向对象</title>
    <link href="/2016/09/18/javascript-OOP/"/>
    <id>/2016/09/18/javascript-OOP/</id>
    <published>2016-09-18T07:43:10.000Z</published>
    <updated>2016-09-18T10:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OOP浅析"><a href="#OOP浅析" class="headerlink" title="OOP浅析"></a>OOP浅析</h2><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>面向对象编程(Object Oriented Programming,OOP),我们一般在学习C++和JAVA C#等语言中会经常使用，它 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。它们最大的特点就是：封装 - 继承 - 多态。它比传统的面向过程语言区别于抽象性、封装性、重用性以及便于使用等方面的原因，在复杂的大型系统中能够简化代码使的面向对象编程方式越来越流行。现在也有越来越多的脚本语言采用了面向对象的编程思想让程序由繁化简。</p>
<h3 id="面向对象编程的原则"><a href="#面向对象编程的原则" class="headerlink" title="面向对象编程的原则"></a>面向对象编程的原则</h3><ol>
<li>开放－封闭原则(Open-Closed Principle),接口开放，内容封闭。</li>
<li>里氏代换原则(Liskov Substitution Principle),子类型必须能够替换它们的基类型。</li>
<li>依赖倒置原则(Dependence Inversion Principle),要依赖于抽象，不要依赖于具体。客户端依赖于抽象耦合。</li>
<li>接口隔离原则(Interface Segregation Principle),使用多个专一功能的接口比使用一个的总接口总要好。</li>
<li>合成复用原则(Composite Reuse Principle),多聚合、少继承。</li>
<li>迪米特原则(Law of Demeter),尽可能的减少代码之间的耦合。<a id="more"></a>
</li>
</ol>
<h2 id="javascript-OOP"><a href="#javascript-OOP" class="headerlink" title="javascript OOP"></a>javascript OOP</h2><h3 id="javascript-OOP简介"><a href="#javascript-OOP简介" class="headerlink" title="javascript OOP简介"></a>javascript OOP简介</h3><p>javascript原本是一门脚本语言，它并不具备OOP的特性,当然随着javascript的不断更新在ES5的时候就已经能够使用特殊的方法编写javascript对象了。目前我先使用ES5语法和ES6的语法分别来实现OOP,其实目前ES6的标准规范已经让javascript更像一门面向对象语言了。如果有JAVA基础的同学直接去观看ES6的基础知识会更加易于理解。</p>
<h3 id="javascript-OOP-for-ES5"><a href="#javascript-OOP-for-ES5" class="headerlink" title="javascript OOP for ES5"></a>javascript OOP for ES5</h3><h4 id="普通的javascript对象"><a href="#普通的javascript对象" class="headerlink" title="普通的javascript对象"></a>普通的javascript对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    name : <span class="string">"myName"</span>,</div><div class="line">    age : <span class="string">"11"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> my = obj;</div><div class="line"><span class="keyword">var</span> my2 = obj;</div><div class="line"><span class="built_in">console</span>.log(my.name); <span class="comment">//myName</span></div><div class="line"><span class="built_in">console</span>.log(my2.name); <span class="comment">//myName</span></div><div class="line">my2.name = <span class="string">"lanling"</span>;</div><div class="line"><span class="built_in">console</span>.log(my.name); <span class="comment">//lanling</span></div><div class="line"><span class="built_in">console</span>.log(my2.name); <span class="comment">//lanling</span></div></pre></td></tr></table></figure>
<p>在javascript中对象是由一对花括号，内部由key:value键值对组成，或者可以将对象申明为 <code>new object()</code>,这段代码中我们申明了普通对象<code>obj</code> my、my2都赋值了<code>obj</code>对象，运行两断代码后我们发现他们<code>my.name</code> <code>my2.name</code>的值都是相等当我们为<code>my2.name</code>修改值的时候发现<code>my1</code> <code>my2</code>的值都发生了改变，所有的类型都共用了一个堆内存，当其中一个值改变的时候其他的值也都发生了变化。结果造成了代码的共用，在开发上不利于我们减少代码复用的思想。</p>
<h4 id="javascript对象的实例化"><a href="#javascript对象的实例化" class="headerlink" title="javascript对象的实例化"></a>javascript对象的实例化</h4><p>我们在C++中有学过为了对象不使用同一块内存提高代码的复用性，减少代码的耦合度我们会使用实例化对象来对一个对象进行初始化，让它们分别不同分置在不同的堆内存空间当中，在C++中我们创造了构造函数使用<code>Object *object = new  Object()</code>来实例化对象，在javascript中我们也有一种方法来开辟对内存空间建立一个构造函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyObj = <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;</div><div class="line">        name:name,</div><div class="line">        age: age</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> obj</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> my3 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="keyword">var</span> my4 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="built_in">console</span>.log(my3.name);<span class="comment">//myName</span></div><div class="line"><span class="built_in">console</span>.log(my4.name);<span class="comment">//myName</span></div><div class="line">my3.name = <span class="string">"langlin"</span>;</div><div class="line"><span class="built_in">console</span>.log(my3.name);<span class="comment">//langlin</span></div><div class="line"><span class="built_in">console</span>.log(my4.name);<span class="comment">//myName</span></div></pre></td></tr></table></figure></p>
<p>上面的代码中我们利用了javascript作用域的特点，对一个方法<code>retrurn obj</code>返回了一个对象，使方法在局部函数之中变成未初始化的状态，之后赋值时利用<code>new</code>运算符实例化了一个对象让它们分置在了不同的堆内存之中，在对<code>my3.name</code>进行赋值时仅仅只影响了该堆内存空间中的值，极大的提高了代码的复用性。</p>
<h4 id="javascript私有属性方法"><a href="#javascript私有属性方法" class="headerlink" title="javascript私有属性方法"></a>javascript私有属性方法</h4><p>在面向对象开发中我们需要满足的一个原则也就是开闭原则（接口开放和内容封闭）最简单的理解就是进行封装将实现的内容用私有方法和属性隐藏起来不对外暴露来达到程序的安全。在javascript ES5中没有类的概念，我们可以使用作用域的手段实现私有方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyObj = <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> privateFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"私有方法无法被直接调用"</span>)</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> obj = &#123;</div><div class="line">        name:name,</div><div class="line">        age: age,</div><div class="line">        private:privateFunction</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> obj</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> my3 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="built_in">console</span>.log(my3.private());<span class="comment">//私有方法无法被直接调用</span></div><div class="line"><span class="built_in">console</span>.log(my3.privateFunction());<span class="comment">//程序运行出错</span></div></pre></td></tr></table></figure></p>
<p>我们可以看到我们在<code>obj</code>中使用对象<code>private</code>属性引用<code>privateFunction</code>方法在实例化之后使用<code>my3.private()</code>正常调用了内部的私有方法。但是我们在使用<code>my3.privateFunction()</code>的时候直接报错了该方法并没有被对外部开放所以我们无法直接调用，这其实就是利用javascript函数的作用域创造了一个函数的闭包。闭包这个延伸的问题我留着以后再讲吧。</p>
<h4 id="javascript对象的延伸（原型链）"><a href="#javascript对象的延伸（原型链）" class="headerlink" title="javascript对象的延伸（原型链）"></a>javascript对象的延伸（原型链）</h4><p>在javascript中我们不得不提的对象生成方法就是原型链了。每个对象都有<code>prototype</code>属性来表示隐式引用（implicit reference），我们将这个引用称之为原型（prototype）。在每个对象之中都有一个<code>__proto__</code>的属性值来实现原型的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyObj = <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;</div><div class="line">        name:name,</div><div class="line">        age: age</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> obj</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> my3 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="keyword">var</span> my4 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="comment">//我们在这里申明prototype方法</span></div><div class="line">myObj.prototype.nikeName = <span class="literal">null</span>;</div><div class="line">my3.nikeName = <span class="string">"lanling"</span>;</div><div class="line"><span class="built_in">console</span>.log(my3.nikeName);<span class="comment">//lanling</span></div><div class="line"><span class="built_in">console</span>.log(my4.nikeName);<span class="comment">//undefined</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    name : <span class="string">"myName"</span>,</div><div class="line">    age : <span class="string">"11"</span></div><div class="line">&#125;;</div><div class="line">obj.prototype.nikeName = <span class="string">"error"</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.nikeName);<span class="comment">//程序运行出错</span></div></pre></td></tr></table></figure></p>
<p>在上面程序段中我们用了<code>new</code>运算符给<code>prototype</code>添加对象属性和未使用<code>new</code>运算符添加<code>prototype</code>对象属性，我们可以很直观的看到第二个程序运行发生了错误，从而我们可以了解到<code>prototype</code>必须是对象有经过实例化才可以进行添加。<br>使用技巧：在传统的对象实例化之后对象是不允许添加任何属性和方法，我们如果想给一个对象添加新的方法时可以使用<code>prototype</code>给对象添加更多的属性和让对象实现继承。<br>有了原型链，便可以定义一种所谓的属性隐藏机制，并通过这种机制实现继承。ECMAScript 规定，当要给某个对象的属性赋值时，解释器会查找该对象原型链中第一个含有该属性的对象（注：原型本身就是一个对象，那么原型链即为一组对象的链。对象的原型链中的第一个对象是该对象本身）进行赋值。反之，如果要获取某个对象属性的值，解释器自然是返回该对象原型链中首先具有该属性的对象属性值。</p>
<h3 id="javascript-for-ES6"><a href="#javascript-for-ES6" class="headerlink" title="javascript for ES6"></a>javascript for ES6</h3><h4 id="javascript-ES6对象"><a href="#javascript-ES6对象" class="headerlink" title="javascript ES6对象"></a>javascript ES6对象</h4><p>这里是javascript ES6对象的实现，我就直接上注释给各位小伙伴们看吧。在ES6中javascript引入了<code>Class</code>这个概念给javascript看起来更像是一门面向对象的语言，在构造函数上使用<code>constructor()</code>来初始化对象在构造器中我们还可以使用<code>super</code>关键字来继承对象。<br>es6.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;<span class="comment">//函数构造器</span></div><div class="line">        <span class="keyword">super</span>(props)<span class="comment">//继承</span></div><div class="line">        <span class="keyword">this</span>.name = <span class="string">"myName"</span>;</div><div class="line">        <span class="keyword">this</span>.age = <span class="string">"11"</span>;</div><div class="line">    &#125;</div><div class="line">    my()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">        privateFunction();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> privateFunction = ()=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"这是一个私有函数"</span>);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test;<span class="comment">//引出</span></div></pre></td></tr></table></figure></p>
<p>main.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./es6'</span> <span class="comment">//导入</span></div><div class="line"><span class="keyword">var</span> my=<span class="keyword">new</span> Test();</div><div class="line">my.my();<span class="comment">//myName 11 这是一个私有函数</span></div><div class="line">my.privateFunction();<span class="comment">//报错</span></div></pre></td></tr></table></figure></p>
<p>在ES6中我们可以把一个类看成一个整体模块文件由export引出import接收。在ES6中由于没有私有方法的定义，我们该类文件中任意<code>class</code>之外的任意一个地区使用<code>function()</code>来建立一个私有方法，一个文件类中只允许有一个<code>class</code>在类中允许拥有公共方法和构造函数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OOP浅析&quot;&gt;&lt;a href=&quot;#OOP浅析&quot; class=&quot;headerlink&quot; title=&quot;OOP浅析&quot;&gt;&lt;/a&gt;OOP浅析&lt;/h2&gt;&lt;h3 id=&quot;面向对象编程&quot;&gt;&lt;a href=&quot;#面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程&quot;&gt;&lt;/a&gt;面向对象编程&lt;/h3&gt;&lt;p&gt;面向对象编程(Object Oriented Programming,OOP),我们一般在学习C++和JAVA C#等语言中会经常使用，它 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。它们最大的特点就是：封装 - 继承 - 多态。它比传统的面向过程语言区别于抽象性、封装性、重用性以及便于使用等方面的原因，在复杂的大型系统中能够简化代码使的面向对象编程方式越来越流行。现在也有越来越多的脚本语言采用了面向对象的编程思想让程序由繁化简。&lt;/p&gt;
&lt;h3 id=&quot;面向对象编程的原则&quot;&gt;&lt;a href=&quot;#面向对象编程的原则&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程的原则&quot;&gt;&lt;/a&gt;面向对象编程的原则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;开放－封闭原则(Open-Closed Principle),接口开放，内容封闭。&lt;/li&gt;
&lt;li&gt;里氏代换原则(Liskov Substitution Principle),子类型必须能够替换它们的基类型。&lt;/li&gt;
&lt;li&gt;依赖倒置原则(Dependence Inversion Principle),要依赖于抽象，不要依赖于具体。客户端依赖于抽象耦合。&lt;/li&gt;
&lt;li&gt;接口隔离原则(Interface Segregation Principle),使用多个专一功能的接口比使用一个的总接口总要好。&lt;/li&gt;
&lt;li&gt;合成复用原则(Composite Reuse Principle),多聚合、少继承。&lt;/li&gt;
&lt;li&gt;迪米特原则(Law of Demeter),尽可能的减少代码之间的耦合。
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="nodeJs" scheme="/tags/nodeJs/"/>
    
      <category term="javascript" scheme="/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="/2016/09/18/group-test/"/>
    <id>/2016/09/18/group-test/</id>
    <published>2016-09-18T06:06:14.000Z</published>
    <updated>2016-09-18T09:13:28.000Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/html/group1.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/html/group2.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/html/group3.png" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/html/group4.jpg" alt=""></div></div></div></div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="/2016/09/01/hello-world/"/>
    <id>/2016/09/01/hello-world/</id>
    <published>2016-09-01T06:06:02.000Z</published>
    <updated>2017-01-26T06:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/html/next.png" class="full-image"></p>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/html/next.png&quot; class=&quot;full-image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodeJs" scheme="/categories/nodeJs/"/>
    
    
      <category term="hexo" scheme="/tags/hexo/"/>
    
      <category term="nodeJs" scheme="/tags/nodeJs/"/>
    
  </entry>
  
</feed>
