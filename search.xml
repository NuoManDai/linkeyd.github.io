<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[nodeJs结合Mysql数据库与前端Ajax登陆实例]]></title>
      <url>/2016/09/21/node-mvc-demo/</url>
      <content type="html"><![CDATA[<h2 id="NodeJs-express框架-MVC结合Mysql数据库与前端Ajax登陆实例"><a href="#NodeJs-express框架-MVC结合Mysql数据库与前端Ajax登陆实例" class="headerlink" title="NodeJs(express框架) MVC结合Mysql数据库与前端Ajax登陆实例"></a>NodeJs(express框架) MVC结合Mysql数据库与前端Ajax登陆实例</h2><p>本实例我们使用NodeJs作为服务端链接Mysql数据库，前端使用Ajax操作.获取的数据格式为Json形式.该用例下载地址github:<a href="https://github.com/linkeyd/nodeMysql" target="_blank" rel="external">nodeMysql</a></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>创建一个Mysql <code>Test</code>数据库表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for `user`</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</div><div class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of user</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'test'</span>, <span class="string">'lanling'</span>, <span class="string">'1'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>我们使用NodeJs带的NPM包安装相关库文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install mysql --save</div><div class="line">npm install express --save</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="创建models文件夹"><a href="#创建models文件夹" class="headerlink" title="创建models文件夹"></a>创建models文件夹</h4><p>models文件夹中创建<code>connection.js</code>链接数据库实例,链接数据库.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);<span class="comment">//引用mysql包</span></div><div class="line"><span class="keyword">var</span> connection = mysql.createPool(&#123;</div><div class="line">    host: <span class="string">'127.0.0.1'</span>,<span class="comment">//主机地址</span></div><div class="line">    port: <span class="string">'3306'</span>,<span class="comment">//端口号</span></div><div class="line">    database: <span class="string">'test'</span>,<span class="comment">//数据库</span></div><div class="line">    user: <span class="string">'root'</span>,<span class="comment">//数据库账号</span></div><div class="line">    password: <span class="string">'root'</span><span class="comment">//数据库密码</span></div><div class="line">&#125;);</div><div class="line">connection.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err,connection</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err)&#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"database link success"</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports = connection;</div></pre></td></tr></table></figure></p>
<p>models文件夹中创建<code>userModel.js</code>,进行数据库语句操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connection = <span class="built_in">require</span>(<span class="string">'./connection'</span>);</div><div class="line"><span class="keyword">var</span> UserModel = <span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</div><div class="line">&#125;;</div><div class="line">UserModel.Login = <span class="function"><span class="keyword">function</span>(<span class="params">username,password,cb</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> selectResult = <span class="string">'select * from user where username=? and password=?'</span>;</div><div class="line">     <span class="comment">/**</span></div><div class="line">     * query(数据库语句,?中参数,结果集)</div><div class="line">     */</div><div class="line">    connection.query(selectResult,[username,password],<span class="function"><span class="keyword">function</span> (<span class="params">error,result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(error)&#123;</div><div class="line">            <span class="built_in">console</span>.log(error);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!result)&#123;</div><div class="line">                <span class="keyword">return</span> cb(error,<span class="literal">null</span>);<span class="comment">//callback函数。查找sql的结果给controller执行结果</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> cb(error,result);<span class="comment">//callback函数。查找sql的结果给controller执行结果</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = UserModel;</div></pre></td></tr></table></figure></p>
<h4 id="建立controller文件夹"><a href="#建立controller文件夹" class="headerlink" title="建立controller文件夹"></a>建立controller文件夹</h4><p>controller文件夹中创建<code>userController.js</code>文件.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userModel = <span class="built_in">require</span>(<span class="string">'../models/userModel'</span>);</div><div class="line"><span class="keyword">var</span> UserController = &#123;</div><div class="line">  login : <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> username = req.body.username;<span class="comment">//获取前端提交的数据</span></div><div class="line">      <span class="keyword">var</span> password = req.body.password;<span class="comment">//获取前端提交的数据</span></div><div class="line">      <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span>(result.length == <span class="number">0</span>)&#123;</div><div class="line">              res.json(&#123;status:<span class="number">1001</span>,message:<span class="string">"账号或密码错误"</span>&#125;);<span class="comment">//返回给前端的数据</span></div><div class="line">          &#125;</div><div class="line">          <span class="keyword">else</span>&#123;</div><div class="line">              res.json(&#123;status:<span class="number">200</span>,message:result&#125;);<span class="comment">//返回给前端的数据</span></div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line">      userModel.Login(username,password,callback);<span class="comment">//执行userModel的SQL</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = UserController;</div></pre></td></tr></table></figure></p>
<h4 id="建立routers文件夹"><a href="#建立routers文件夹" class="headerlink" title="建立routers文件夹"></a>建立routers文件夹</h4><p>routers文件夹中新建<code>userRoute.js</code>文件，发送<code>post,get</code>请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"><span class="keyword">var</span> userController = <span class="built_in">require</span>(<span class="string">'../controller/userController'</span>);</div><div class="line"><span class="comment">//开始链接到login.html文件</span></div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.redirect(<span class="string">'login.html'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//login post请求</span></div><div class="line">router.post(<span class="string">'/login'</span>,userController.login);</div><div class="line"><span class="built_in">module</span>.exports =router;</div></pre></td></tr></table></figure></p>
<p><code>app.js</code>配置路由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = <span class="built_in">require</span>(<span class="string">'./routes/userRoute'</span>);</div><div class="line">app.use(<span class="string">'/users'</span>, users);</div></pre></td></tr></table></figure></p>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>建立public文件夹<br>新建<code>login.html</code></p>
<h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-data"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> username = <span class="built_in">document</span>.querySelector(<span class="string">'#username'</span>).value;<span class="comment">//获取账号输入数据</span></div><div class="line">    <span class="keyword">var</span> password = <span class="built_in">document</span>.querySelector(<span class="string">'#password'</span>).value;<span class="comment">//获取密码输入数据</span></div><div class="line">    <span class="comment">//ajax异步执行成功后返回的数据结果</span></div><div class="line">    <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(data.status == <span class="number">200</span>)&#123;</div><div class="line">            alert(<span class="string">"登陆成功"</span>);</div><div class="line">            <span class="built_in">document</span>.querySelector(<span class="string">'#html'</span>).innerHTML = <span class="string">"您登陆的账号ID为:"</span>+data.message[<span class="number">0</span>].id;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            alert(<span class="string">"登陆失败"</span>);</div><div class="line">            <span class="built_in">document</span>.querySelector(<span class="string">'#html'</span>).innerHTML = data.message;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    ajax(&#123;</div><div class="line">      url : <span class="string">'/login'</span>,<span class="comment">//执行router url请求</span></div><div class="line">      type:<span class="string">'POST'</span>,<span class="comment">//请求类型</span></div><div class="line">      dataType:<span class="string">'json'</span>,</div><div class="line">      data:&#123;username:username,password:password&#125;,<span class="comment">//request提交给后台数据</span></div><div class="line">      success:callback,</div><div class="line">      error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(err);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="js-ajax模块"><a href="#js-ajax模块" class="headerlink" title="js ajax模块"></a>js ajax模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    options = options || &#123;&#125;;</div><div class="line"></div><div class="line">    options.type = (options.type || <span class="string">'GET'</span>).toUpperCase();<span class="comment">//toUpperCase 大小写转化,默认全部转化成大写</span></div><div class="line">    options.dataType = options.dataType || <span class="string">'json'</span>;</div><div class="line">    <span class="keyword">var</span> params = formatParams(options.data);</div><div class="line">    <span class="comment">//创建非IE6 AJAX请求</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//连接和发送</span></div><div class="line">    <span class="keyword">if</span> (options.type == <span class="string">'GET'</span>) &#123;</div><div class="line">        xhr.open(<span class="string">'GET'</span>, options.url + <span class="string">'?'</span> + params, <span class="literal">true</span>);</div><div class="line">        xhr.send(<span class="literal">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.type == <span class="string">'POST'</span>) &#123;</div><div class="line">        xhr.open(<span class="string">'POST'</span>, options.url, <span class="literal">true</span>);</div><div class="line">        <span class="comment">//提交表单设置的内容类型</span></div><div class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line">        xhr.send(params);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//接收请求</span></div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">var</span> status = xhr.status;</div><div class="line">            <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>) &#123;</div><div class="line">                options.success &amp;&amp; options.success(<span class="built_in">JSON</span>.parse(xhr.responseText), xhr.responseXML);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                options.error &amp;&amp; options.error(status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="comment">//将请求的对象转化成url</span></div><div class="line"><span class="keyword">var</span> formatParams = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> data) &#123;</div><div class="line">        arr.push(<span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[name]));</div><div class="line">    &#125;</div><div class="line">    arr.push((<span class="string">'v='</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>, <span class="string">''</span>));</div><div class="line">    <span class="keyword">return</span> arr.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MVC and Ajax]]></title>
      <url>/2016/09/21/mvc-ajax/</url>
      <content type="html"><![CDATA[<h2 id="MVC浅析"><a href="#MVC浅析" class="headerlink" title="MVC浅析"></a>MVC浅析</h2><h3 id="MVC简介"><a href="#MVC简介" class="headerlink" title="MVC简介"></a>MVC简介</h3><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写。是一种用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。MVC 分层有助于管理复杂的应用程序，可以结合AJAX前后端分离，让服务端成员在没有视图的基础上也可以进行用例测试。</p>
<h3 id="MVC功能"><a href="#MVC功能" class="headerlink" title="MVC功能"></a>MVC功能</h3><ol>
<li><strong>Model</strong>（模型）是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据,和创建数据库模型。</li>
<li><strong>View</strong>（视图）是应用程序中处理数据显示的部分。通常视图是HTML等图形显示部分（前端部分）。</li>
<li><strong>Controller</strong>（控制器）是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。而在现代模型中服务端工程师与前端工程师都要负责 <strong>Controller</strong>部分代码，服务端主要的表现形式为request获取前端用户数据和respond前端返回前端数据，前端主要表现为AJAX发送用户数据，Callback回调成功服务端数据通过数据修改视图显示状态。<a id="more"></a>
</li>
</ol>
<h3 id="MVC结构图"><a href="#MVC结构图" class="headerlink" title="MVC结构图"></a>MVC结构图</h3><p><img src="/html/mvc.jpg" alt="tool-editor"></p>
<h2 id="Ajax浅析"><a href="#Ajax浅析" class="headerlink" title="Ajax浅析"></a>Ajax浅析</h2><h3 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h3><p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是一种前端技术，它可以实现在不刷新页面的情况下修改DOM即可观察到页面数据的变化，是一种动态网页技术，在目前MXL基本被JSON替代。在传统编程中我们大量接触的是同步编程，而Ajax是一种异步编程方式。所谓的同步和异步在很大的区别上是指执行顺序的不同。</p>
<h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><p>json是一种数据格式，它的主要构成是一个<code>{key:value}</code>键值对形式，<code>value</code>可嵌套数组和继续嵌套键值对等，是一种易解析且易组成复杂数据的数据格式。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">status: 200,</div><div class="line">message: [&#123;</div><div class="line">      username: "test", </div><div class="line">      password: "lanling", id: 1</div><div class="line">      &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>假定A语句，B语句，C语句，D语句呈队列排序。每条语句的执行顺序为2S,1S,1.5S,0.5S.<br>同步编程执行顺序:A-&gt;B-&gt;C-&gt;D<br>异步执行顺序：A,B,C,D 同时进行，无先后执行顺序。</p>
<h3 id="synchronous-同步-asynchronous（异步）执行顺序图"><a href="#synchronous-同步-asynchronous（异步）执行顺序图" class="headerlink" title="synchronous(同步)asynchronous（异步）执行顺序图"></a>synchronous(同步)asynchronous（异步）执行顺序图</h3><p><img src="/html/async.png" alt="tool-editor"></p>
<h3 id="js-Ajax实现"><a href="#js-Ajax实现" class="headerlink" title="js Ajax实现"></a>js Ajax实现</h3><p>js ajax模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    options = options || &#123;&#125;;</div><div class="line"></div><div class="line">    options.type = (options.type || <span class="string">'GET'</span>).toUpperCase();<span class="comment">//toUpperCase 大小写转化,默认全部转化成大写</span></div><div class="line">    options.dataType = options.dataType || <span class="string">'json'</span>;</div><div class="line">    <span class="keyword">var</span> params = formatParams(options.data);</div><div class="line">    <span class="comment">//创建非IE6 AJAX请求</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//连接和发送</span></div><div class="line">    <span class="keyword">if</span> (options.type == <span class="string">'GET'</span>) &#123;</div><div class="line">        xhr.open(<span class="string">'GET'</span>, options.url + <span class="string">'?'</span> + params, <span class="literal">true</span>);</div><div class="line">        xhr.send(<span class="literal">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.type == <span class="string">'POST'</span>) &#123;</div><div class="line">        xhr.open(<span class="string">'POST'</span>, options.url, <span class="literal">true</span>);</div><div class="line">        <span class="comment">//提交表单设置的内容类型</span></div><div class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line">        xhr.send(params);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//接收请求</span></div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">var</span> status = xhr.status;</div><div class="line">            <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>) &#123;</div><div class="line">                options.success &amp;&amp; options.success(<span class="built_in">JSON</span>.parse(xhr.responseText), xhr.responseXML);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                options.error &amp;&amp; options.error(status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="comment">//将请求的对象转化成url</span></div><div class="line"><span class="keyword">var</span> formatParams = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> data) &#123;</div><div class="line">        arr.push(<span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[name]));</div><div class="line">    &#125;</div><div class="line">    arr.push((<span class="string">'v='</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>, <span class="string">''</span>));</div><div class="line">    <span class="keyword">return</span> arr.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   ajax(&#123;</div><div class="line">      url : <span class="string">'/login'</span>,<span class="comment">//执行router url请求</span></div><div class="line">      type:<span class="string">'POST'</span>,<span class="comment">//请求类型</span></div><div class="line">      dataType:<span class="string">'json'</span>,</div><div class="line">      data:&#123;username:username,password:password&#125;,<span class="comment">//request提交给后台数据</span></div><div class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">      &#125;,</div><div class="line">      error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(err);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript面向对象]]></title>
      <url>/2016/09/18/javascript-OOP/</url>
      <content type="html"><![CDATA[<h2 id="OOP浅析"><a href="#OOP浅析" class="headerlink" title="OOP浅析"></a>OOP浅析</h2><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>面向对象编程(Object Oriented Programming,OOP),我们一般在学习C++和JAVA C#等语言中会经常使用，它 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。它们最大的特点就是：封装 - 继承 - 多态。它比传统的面向过程语言区别于抽象性、封装性、重用性以及便于使用等方面的原因，在复杂的大型系统中能够简化代码使的面向对象编程方式越来越流行。现在也有越来越多的脚本语言采用了面向对象的编程思想让程序由繁化简。</p>
<h3 id="面向对象编程的原则"><a href="#面向对象编程的原则" class="headerlink" title="面向对象编程的原则"></a>面向对象编程的原则</h3><ol>
<li>开放－封闭原则(Open-Closed Principle),接口开放，内容封闭。</li>
<li>里氏代换原则(Liskov Substitution Principle),子类型必须能够替换它们的基类型。</li>
<li>依赖倒置原则(Dependence Inversion Principle),要依赖于抽象，不要依赖于具体。客户端依赖于抽象耦合。</li>
<li>接口隔离原则(Interface Segregation Principle),使用多个专一功能的接口比使用一个的总接口总要好。</li>
<li>合成复用原则(Composite Reuse Principle),多聚合、少继承。</li>
<li>迪米特原则(Law of Demeter),尽可能的减少代码之间的耦合。<a id="more"></a>
</li>
</ol>
<h2 id="javascript-OOP"><a href="#javascript-OOP" class="headerlink" title="javascript OOP"></a>javascript OOP</h2><h3 id="javascript-OOP简介"><a href="#javascript-OOP简介" class="headerlink" title="javascript OOP简介"></a>javascript OOP简介</h3><p>javascript原本是一门脚本语言，它并不具备OOP的特性,当然随着javascript的不断更新在ES5的时候就已经能够使用特殊的方法编写javascript对象了。目前我先使用ES5语法和ES6的语法分别来实现OOP,其实目前ES6的标准规范已经让javascript更像一门面向对象语言了。如果有JAVA基础的同学直接去观看ES6的基础知识会更加易于理解。</p>
<h3 id="javascript-OOP-for-ES5"><a href="#javascript-OOP-for-ES5" class="headerlink" title="javascript OOP for ES5"></a>javascript OOP for ES5</h3><h4 id="普通的javascript对象"><a href="#普通的javascript对象" class="headerlink" title="普通的javascript对象"></a>普通的javascript对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    name : <span class="string">"myName"</span>,</div><div class="line">    age : <span class="string">"11"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> my = obj;</div><div class="line"><span class="keyword">var</span> my2 = obj;</div><div class="line"><span class="built_in">console</span>.log(my.name); <span class="comment">//myName</span></div><div class="line"><span class="built_in">console</span>.log(my2.name); <span class="comment">//myName</span></div><div class="line">my2.name = <span class="string">"lanling"</span>;</div><div class="line"><span class="built_in">console</span>.log(my.name); <span class="comment">//lanling</span></div><div class="line"><span class="built_in">console</span>.log(my2.name); <span class="comment">//lanling</span></div></pre></td></tr></table></figure>
<p>在javascript中对象是由一对花括号，内部由key:value键值对组成，或者可以将对象申明为 <code>new object()</code>,这段代码中我们申明了普通对象<code>obj</code> my、my2都赋值了<code>obj</code>对象，运行两断代码后我们发现他们<code>my.name</code> <code>my2.name</code>的值都是相等当我们为<code>my2.name</code>修改值的时候发现<code>my1</code> <code>my2</code>的值都发生了改变，所有的类型都共用了一个堆内存，当其中一个值改变的时候其他的值也都发生了变化。结果造成了代码的共用，在开发上不利于我们减少代码复用的思想。</p>
<h4 id="javascript对象的实例化"><a href="#javascript对象的实例化" class="headerlink" title="javascript对象的实例化"></a>javascript对象的实例化</h4><p>我们在C++中有学过为了对象不使用同一块内存提高代码的复用性，减少代码的耦合度我们会使用实例化对象来对一个对象进行初始化，让它们分别不同分置在不同的堆内存空间当中，在C++中我们创造了构造函数使用<code>Object *object = new  Object()</code>来实例化对象，在javascript中我们也有一种方法来开辟对内存空间建立一个构造函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyObj = <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;</div><div class="line">        name:name,</div><div class="line">        age: age</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> obj</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> my3 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="keyword">var</span> my4 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="built_in">console</span>.log(my3.name);<span class="comment">//myName</span></div><div class="line"><span class="built_in">console</span>.log(my4.name);<span class="comment">//myName</span></div><div class="line">my3.name = <span class="string">"langlin"</span>;</div><div class="line"><span class="built_in">console</span>.log(my3.name);<span class="comment">//langlin</span></div><div class="line"><span class="built_in">console</span>.log(my4.name);<span class="comment">//myName</span></div></pre></td></tr></table></figure></p>
<p>上面的代码中我们利用了javascript作用域的特点，对一个方法<code>retrurn obj</code>返回了一个对象，使方法在局部函数之中变成未初始化的状态，之后赋值时利用<code>new</code>运算符实例化了一个对象让它们分置在了不同的堆内存之中，在对<code>my3.name</code>进行赋值时仅仅只影响了该堆内存空间中的值，极大的提高了代码的复用性。</p>
<h4 id="javascript私有属性方法"><a href="#javascript私有属性方法" class="headerlink" title="javascript私有属性方法"></a>javascript私有属性方法</h4><p>在面向对象开发中我们需要满足的一个原则也就是开闭原则（接口开放和内容封闭）最简单的理解就是进行封装将实现的内容用私有方法和属性隐藏起来不对外暴露来达到程序的安全。在javascript ES5中没有类的概念，我们可以使用作用域的手段实现私有方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyObj = <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> privateFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"私有方法无法被直接调用"</span>)</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> obj = &#123;</div><div class="line">        name:name,</div><div class="line">        age: age,</div><div class="line">        private:privateFunction</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> obj</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> my3 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="built_in">console</span>.log(my3.private());<span class="comment">//私有方法无法被直接调用</span></div><div class="line"><span class="built_in">console</span>.log(my3.privateFunction());<span class="comment">//程序运行出错</span></div></pre></td></tr></table></figure></p>
<p>我们可以看到我们在<code>obj</code>中使用对象<code>private</code>属性引用<code>privateFunction</code>方法在实例化之后使用<code>my3.private()</code>正常调用了内部的私有方法。但是我们在使用<code>my3.privateFunction()</code>的时候直接报错了该方法并没有被对外部开放所以我们无法直接调用，这其实就是利用javascript函数的作用域创造了一个函数的闭包。闭包这个延伸的问题我留着以后再讲吧。</p>
<h4 id="javascript对象的延伸（原型链）"><a href="#javascript对象的延伸（原型链）" class="headerlink" title="javascript对象的延伸（原型链）"></a>javascript对象的延伸（原型链）</h4><p>在javascript中我们不得不提的对象生成方法就是原型链了。每个对象都有<code>prototype</code>属性来表示隐式引用（implicit reference），我们将这个引用称之为原型（prototype）。在每个对象之中都有一个<code>__proto__</code>的属性值来实现原型的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyObj = <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;</div><div class="line">        name:name,</div><div class="line">        age: age</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> obj</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> my3 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="keyword">var</span> my4 = <span class="keyword">new</span> MyObj(<span class="string">"myName"</span>,<span class="string">"11"</span>);</div><div class="line"><span class="comment">//我们在这里申明prototype方法</span></div><div class="line">myObj.prototype.nikeName = <span class="literal">null</span>;</div><div class="line">my3.nikeName = <span class="string">"lanling"</span>;</div><div class="line"><span class="built_in">console</span>.log(my3.nikeName);<span class="comment">//lanling</span></div><div class="line"><span class="built_in">console</span>.log(my4.nikeName);<span class="comment">//undefined</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    name : <span class="string">"myName"</span>,</div><div class="line">    age : <span class="string">"11"</span></div><div class="line">&#125;;</div><div class="line">obj.prototype.nikeName = <span class="string">"error"</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.nikeName);<span class="comment">//程序运行出错</span></div></pre></td></tr></table></figure></p>
<p>在上面程序段中我们用了<code>new</code>运算符给<code>prototype</code>添加对象属性和未使用<code>new</code>运算符添加<code>prototype</code>对象属性，我们可以很直观的看到第二个程序运行发生了错误，从而我们可以了解到<code>prototype</code>必须是对象有经过实例化才可以进行添加。<br>使用技巧：在传统的对象实例化之后对象是不允许添加任何属性和方法，我们如果想给一个对象添加新的方法时可以使用<code>prototype</code>给对象添加更多的属性和让对象实现继承。<br>有了原型链，便可以定义一种所谓的属性隐藏机制，并通过这种机制实现继承。ECMAScript 规定，当要给某个对象的属性赋值时，解释器会查找该对象原型链中第一个含有该属性的对象（注：原型本身就是一个对象，那么原型链即为一组对象的链。对象的原型链中的第一个对象是该对象本身）进行赋值。反之，如果要获取某个对象属性的值，解释器自然是返回该对象原型链中首先具有该属性的对象属性值。</p>
<h3 id="javascript-for-ES6"><a href="#javascript-for-ES6" class="headerlink" title="javascript for ES6"></a>javascript for ES6</h3><h4 id="javascript-ES6对象"><a href="#javascript-ES6对象" class="headerlink" title="javascript ES6对象"></a>javascript ES6对象</h4><p>这里是javascript ES6对象的实现，我就直接上注释给各位小伙伴们看吧。在ES6中javascript引入了<code>Class</code>这个概念给javascript看起来更像是一门面向对象的语言，在构造函数上使用<code>constructor()</code>来初始化对象在构造器中我们还可以使用<code>super</code>关键字来继承对象。<br>es6.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;<span class="comment">//函数构造器</span></div><div class="line">        <span class="keyword">super</span>(props)<span class="comment">//继承</span></div><div class="line">        <span class="keyword">this</span>.name = <span class="string">"myName"</span>;</div><div class="line">        <span class="keyword">this</span>.age = <span class="string">"11"</span>;</div><div class="line">    &#125;</div><div class="line">    my()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">        privateFunction();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> privateFunction = ()=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"这是一个私有函数"</span>);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test;<span class="comment">//引出</span></div></pre></td></tr></table></figure></p>
<p>main.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./es6'</span> <span class="comment">//导入</span></div><div class="line"><span class="keyword">var</span> my=<span class="keyword">new</span> Test();</div><div class="line">my.my();<span class="comment">//myName 11 这是一个私有函数</span></div><div class="line">my.privateFunction();<span class="comment">//报错</span></div></pre></td></tr></table></figure></p>
<p>在ES6中我们可以把一个类看成一个整体模块文件由export引出import接收。在ES6中由于没有私有方法的定义，我们该类文件中任意<code>class</code>之外的任意一个地区使用<code>function()</code>来建立一个私有方法，一个文件类中只允许有一个<code>class</code>在类中允许拥有公共方法和构造函数。</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/2016/09/18/group-test/</url>
      <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/html/group1.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/html/group2.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/html/group3.png" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/html/group4.jpg" alt=""></div></div></div></div>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/09/17/hello-world/</url>
      <content type="html"><![CDATA[<p><img src="/html/next.png" class="full-image"></p>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
